name: Build, Analyze, Scan

on:
  push:
    branches:
      - main

jobs:
  build-analyze-scan:
    name: Build, Analyze, and Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Disable shallow clone for better SonarQube analysis

      # - name: Build and analyze with SonarQube
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Install and run Trivy
        run: |
          echo "Installing Trivy..."
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          echo "Running Trivy scan..."
          trivy fs .

      - name: Install and run Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "Installing Snyk..."
          npm install -g snyk

          echo "Authenticating Snyk..."
          snyk auth "${SNYK_TOKEN}"

          echo "Running Snyk test..."
          snyk test --all-projects

          echo "Monitoring project with Snyk..."
          snyk monitor --all-projects

      # - name: Install and run OWASP Dependency-Check
      #   env:
      #     NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
      #   run: |
      #     echo "Downloading and installing OWASP Dependency-Check..."
      #     wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
      #     unzip dependency-check-12.1.0-release.zip
      #     echo "Running OWASP Dependency-Check scan..."
      #     cd dependency-check/bin
      #     ./dependency-check.sh --scan ../.. --format ALL --nvdApiKey "${NVD_API_KEY}" --out ../reports --failOnCVSS 7 --data /tmp/dependency-check-data

      - name: Docker build and push
        run: |
          docker build -t finwise .
          docker tag finwise ${{ secrets.DOCKERHUB_USERNAME }}/demo:latest
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/demo:latest
        env:
          DOCKER_CLI_ACI: 1

  deploy:
    name: Deploy App
    needs: build-analyze-scan
    runs-on: ubuntu-latest
    steps:
      - name: Pull the docker image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/demo:latest

      - name: Trivy image scan
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y
          trivy image ${{ secrets.DOCKERHUB_USERNAME }}/demo:latest

      # - name: Run the container finwise
      #   run: docker run -d --name finwise -p 8081:80 ${{ secrets.DOCKERHUB_USERNAME }}/demo:latest
      - name: Checkout repo for Vercel deployment
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
